#include "directx_common.h"
#include "directx_workspace.h"

using namespace tvm::runtime::dx;

// There are actually 3 types of directx shader inputs:
//  1. Most common: HLSL, which is c/c++ like language;
//  2. DXBC, which is used before shader model 6.0 as intermedidate language. Generated by
//  d3dcompiler;
//  3. DXIL, new intermediate language from shader model 6.0. Generated by dxcompiler;

namespace tvm {
namespace runtime {

class DirectXModuleNode;

// a wrapped function class to get packed func.
class DirectXWrappedFunc {
 public:
  DirectXWrappedFunc(DirectXModuleNode* m, ObjectPtr<Object> sptr, const std::string& func_name,
                     const FunctionInfo& info);

  // invoke the function with void arguments
  void operator()(TVMArgs args, TVMRetValue* rv, void** void_args) const;

 private:
  friend class DirectXModuleNode;
  // internal module
  DirectXModuleNode* m_;
  // the resource holder
  ObjectPtr<Object> sptr_;
  // The name of the function.
  std::string func_name_;
  // launch parameters configuration
  LaunchParamConfig launch_param_config_;
  // Number of all I/O buffers
  uint32_t num_buffers_;
};

// This class is to wrap a single hlsl code file with different functions.
// Currently,(todo(wenxh)) DXIL and DXBC is not supported.
class DirectXModuleNode : public runtime::ModuleNode {
 public:
  explicit DirectXModuleNode(std::string data, std::string fmt,
                             std::unordered_map<std::string, FunctionInfo> fmap,
                             std::string source);
  const char* type_key() const final { return type_key_.c_str(); }
  void SaveToFile(const std::string& file_name, const std::string& format) final;
  void SaveToBinary(dmlc::Stream* stream) final;
  std::string GetSource(const std::string& format) final;
  PackedFunc GetFunction(const std::string& name, const ObjectPtr<Object>& sptr_to_self);

 private:
  friend class DirectXWrappedFunc;
  // the data
  std::string data_, source_;
  // The format
  std::string fmt_;
  // function information table.
  std::unordered_map<std::string, FunctionInfo> fmap_;
  // internal mutex when updating the module
  std::mutex mutex_;
  // global dx workspace
  DirectXWorkspace* workspace_;
  // type key
  std::string type_key_;
  // computershader and its functions
  std::shared_ptr<DirectComputeKernel> compute_kernel_;
};

/*!
 * \brief create a directx module for directx devices from data.
 *
 * \param data The module data.
 * \param fmt The format of the data, can be "hlsl".
 * \param fmap The map function information map of each function.
 */
Module DirectXModuleCreate(std::string data, std::string fmt,
                           std::unordered_map<std::string, FunctionInfo> fmap, std::string source);

Module DirectXModuleLoadFile(const std::string& file_name, const std::string& format);
}  // namespace runtime
}  // namespace tvm